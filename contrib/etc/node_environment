#!/bin/bash
source cgroup-limits

set -o pipefail
set -eu
# Include hidden files
shopt -s dotglob

# Set the umask to be '002' so that any files/directories created from
# this point are group writable.
umask 002

npm() {
  if [ -f "yarn.lock" ]; then
    # Since 0.24.6 yarn added a bash intrepeter
    if [ -f "/opt/yarn/bin/yarn.js" ]; then
      node "$NODE_ARGS" /opt/yarn/bin/yarn.js "$@"
    else
      node "$NODE_ARGS" /usr/local/bin/yarn "$@"
    fi
  else
    node "$NODE_ARGS" /usr/local/bin/npm "$@"
  fi
}

# Define the maximum memory limit (total_limit - 32MB)
if [ ${NODE_VERSION:0:1} == "4" ]; then
  # The v8 engine packaged with node4 uses max_old_space_size
  export NODE_ARGS=${NODE_ARGS:-"--max_old_space_size=$((MEMORY_LIMIT_IN_BYTES/1000000-32))"}
else
  export NODE_ARGS=${NODE_ARGS:-"--max-old-space-size=$((MEMORY_LIMIT_IN_BYTES/1000000-32))"}
fi

# Set the debug port and development environment
export DEBUG_PORT=${DEBUG_PORT:-"5858"}
export DEV_MODE=${DEV_MODE:-"false"}

# If NODE_ENV is not set by the user, then NODE_ENV is determined by whether
# the container is run in development mode.
if [ -z "$NODE_ENV" ]; then
  if [ "$DEV_MODE" == true ]; then
    export NODE_ENV=development
  else
    export NODE_ENV=production
  fi
fi

# Initialized with "npm run $NPM_RUN"
# See https://docs.npmjs.com/misc/scripts, and your repo's package.json
export NPM_RUN=${NPM_RUN:-"start"}
